name: 🚀 Deploy Laravel App to Production

on:
  push:
    branches:
      - production

env:
  SSH_TARGET: ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
  PROJECT_PATH: /domains/${{ secrets.DOMAIN }}/laravel_project
  PUBLIC_PATH: /domains/${{ secrets.DOMAIN }}/DEFAULT

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📊 Start deployment
        run: echo "🚀 Deployment started at $(date)"

      - name: 🛒 Checkout code
        uses: actions/checkout@v3

      - name: 🧶 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: 🧱 Build assets
        run: |
          npm ci
          npm run build

      - name: 🧠 Set production paths in index.php
        run: |
          sed -i "s|__DIR__.'/../storage/framework/maintenance.php'|__DIR__.'/../laravel_project/storage/framework/maintenance.php'|" public/index.php
          sed -i "s|__DIR__.'/../vendor/autoload.php'|__DIR__.'/../laravel_project/vendor/autoload.php'|" public/index.php
          sed -i "s|__DIR__.'/../bootstrap/app.php'|__DIR__.'/../laravel_project/bootstrap/app.php'|" public/index.php

      - name: 🔑 Setup SSH authentication
        timeout-minutes: 2
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          rm ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: 🔍 Verify server environment
        timeout-minutes: 2
        run: |
          ssh $SSH_TARGET "\
            php -v | head -n 1 && \
            composer --version && \
            cd $PROJECT_PATH && \
            test -f .env || (echo '❌ .env file missing on server' && exit 1)"

      - name: 🚚 Upload application files to server
        timeout-minutes: 10
        run: |
          rsync -avz --delete \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.env \
            --exclude=vendor \
            --exclude=storage/app/public \
            --exclude=storage/logs \
            --exclude=storage/framework/sessions \
            --exclude=storage/framework/cache \
            --exclude=storage/framework/views \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            $SSH_TARGET:$PROJECT_PATH

      - name: 📦 Install Composer dependencies on server
        timeout-minutes: 5
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            composer install --no-dev --optimize-autoloader --no-interaction"

      - name: 💾 Create database backup
        timeout-minutes: 5
        run: |
          BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan db:backup --timestamp=$BACKUP_TIMESTAMP" || {
            echo "❌ Database backup failed - aborting deployment"
            exit 1
          }

      - name: 📸 Create full project backup
        timeout-minutes: 5
        run: |
          BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ssh $SSH_TARGET "\
            cd /domains/${{ secrets.DOMAIN }} && \
            tar -czf laravel_project_backup_${BACKUP_TIMESTAMP}.tar.gz \
              --exclude='laravel_project/storage/logs/*' \
              --exclude='laravel_project/storage/framework/sessions/*' \
              --exclude='laravel_project/storage/framework/cache/*' \
              laravel_project && \
            echo '✅ Backup created: laravel_project_backup_${BACKUP_TIMESTAMP}.tar.gz' && \
            ls -t laravel_project_backup_*.tar.gz | tail -n +6 | xargs -r rm && \
            echo '🧹 Old backups cleaned, keeping 5 most recent'"

      - name: 🔧 Enable maintenance mode
        timeout-minutes: 1
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan down --retry=60 --render='errors::503'"

      - name: 🗄️ Run database migrations
        timeout-minutes: 10
        id: migrations
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan migrate --force"

      - name: 🧹 Clean public/build directory
        timeout-minutes: 1
        run: |
          ssh $SSH_TARGET "rm -rf $PUBLIC_PATH/build"

      - name: 🌐 Deploy public files to DEFAULT
        timeout-minutes: 5
        run: |
          rsync -avz \
            --exclude=.htaccess \
            --exclude=storage \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./public/ \
            $SSH_TARGET:$PUBLIC_PATH/

      - name: 🧼 Optimize application caches
        timeout-minutes: 3
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan config:cache && \
            php artisan route:cache && \
            php artisan view:cache && \
            php artisan event:cache"

      - name: 🔐 Set correct permissions
        timeout-minutes: 2
        run: |
          ssh $SSH_TARGET "\
            chmod -R u+rwX,g+rwX,o+rX $PROJECT_PATH/storage && \
            chmod -R u+rwX,g+rwX,o+rX $PROJECT_PATH/bootstrap/cache"

      - name: 🧪 Verify deployment integrity
        timeout-minutes: 2
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan --version && \
            php artisan config:show app.env | grep -q 'production' && \
            test -d vendor || (echo '❌ Vendor directory missing' && exit 1)"

      - name: ✅ Disable maintenance mode
        timeout-minutes: 1
        if: success()
        run: |
          ssh $SSH_TARGET "cd $PROJECT_PATH && php artisan up"

      - name: 🏥 Health check
        timeout-minutes: 1
        if: success()
        run: |
          # Wait for application to fully initialize
          sleep 5
          curl --fail --silent --show-error --max-time 10 \
            --insecure \
            https://${{ secrets.DOMAIN }}/health || {
            echo "⚠️ Health check failed - please verify application manually"
            echo "URL: https://${{ secrets.DOMAIN }}"
            exit 0
          }

      - name: 📊 Deployment completed successfully
        if: success()
        run: |
          echo "✅ Deployment completed successfully at $(date)"
          echo "🌐 Application: https://${{ secrets.DOMAIN }}"

      - name: 🚨 Rollback deployment on failure
        if: failure() && steps.migrations.outcome == 'failure'
        timeout-minutes: 5
        run: |
          echo "❌ Critical failure detected - initiating rollback"
          ssh $SSH_TARGET "\
            cd /domains/${{ secrets.DOMAIN }} && \
            BACKUP=\$(ls -t laravel_project_backup_*.tar.gz 2>/dev/null | head -1) && \
            if [ -n \"\$BACKUP\" ]; then \
              echo \"📦 Restoring from backup: \$BACKUP\" && \
              rm -rf laravel_project_failed_\$(date +%Y%m%d_%H%M%S) && \
              mv laravel_project laravel_project_failed_\$(date +%Y%m%d_%H%M%S) && \
              tar -xzf \$BACKUP && \
              cd laravel_project && \
              php artisan up && \
              echo \"✅ Rollback completed successfully\"; \
            else \
              echo \"❌ No backup available for rollback\" && \
              cd laravel_project && \
              php artisan migrate:rollback --step=1 --force && \
              php artisan up && \
              echo \"⚠️ Attempted migration rollback and disabled maintenance mode\"; \
            fi" || {
            echo "❌ Rollback failed - attempting emergency recovery"
            ssh $SSH_TARGET "cd $PROJECT_PATH && php artisan up" || true
          }
          echo "💾 Server backups available at: /domains/${{ secrets.DOMAIN }}/laravel_project_backup_*.tar.gz"
          exit 1

      - name: '🚨 Emergency: Disable maintenance mode'
        if: failure() && steps.migrations.outcome != 'failure'
        timeout-minutes: 1
        run: |
          echo "⚠️ Non-critical failure - disabling maintenance mode"
          ssh $SSH_TARGET "cd $PROJECT_PATH && php artisan up" || {
            echo "❌ Failed to disable maintenance mode - manual intervention required"
            echo "Run: ssh $SSH_TARGET 'cd $PROJECT_PATH && php artisan up'"
          }
          exit 1

      - name: 🧹 Cleanup SSH agent
        if: always()
        run: ssh-add -D 2>/dev/null || true
