name: üöÄ Deploy Laravel App to Production

on:
  push:
    branches:
      - production

env:
  SSH_TARGET: ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
  PROJECT_PATH: /domains/${{ secrets.DOMAIN }}/laravel_project
  PUBLIC_PATH: /domains/${{ secrets.DOMAIN }}/DEFAULT
  MAINTENANCE_RETRY_SECONDS: 60
  BACKUP_RETENTION_COUNT: 5

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üìä Start deployment
        run: echo "üöÄ Deployment started at $(date)"

      - name: üõí Checkout code
        uses: actions/checkout@v3

      - name: üß∂ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: üß± Build assets
        run: |
          npm ci
          npm run build

      - name: üß† Prepare production index.php
        run: |
            cp public/index.production.php public/index.php

      - name: üîë Setup SSH authentication
        timeout-minutes: 2
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          set +x
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.SSH_KEY }}"
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: üîç Verify server environment
        timeout-minutes: 2
        run: |
          ssh $SSH_TARGET "\
            php -v | head -n 1 && \
            composer --version && \
            cd $PROJECT_PATH && \
            test -f ../.env || (echo '‚ùå .env file missing on server' && exit 1)"

      - name: üöö Upload application files to server
        timeout-minutes: 10
        run: |
          rsync -avz --delete \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.env \
            --exclude=vendor \
            --exclude=storage/app/public \
            --exclude=storage/logs \
            --exclude=storage/framework/sessions \
            --exclude=storage/framework/cache \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            $SSH_TARGET:$PROJECT_PATH

      - name: üì¶ Install Composer dependencies on server
        timeout-minutes: 5
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            composer install --no-dev --optimize-autoloader --no-interaction"

      - name: üíæ Create database backup
        timeout-minutes: 5
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan backup:run || {
            echo "‚ö†Ô∏è Database backup command failed or not configured"
            echo "If using spatie/laravel-backup, ensure it's installed and configured"
            echo "Continuing deployment without database backup..."
          }

      - name: üì∏ Create full project backup
        timeout-minutes: 5
        run: |
          BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          RETENTION=$((BACKUP_RETENTION_COUNT + 1))
          ssh $SSH_TARGET "\
            cd /domains/${{ secrets.DOMAIN }} && \
            tar -czf laravel_project_backup_${BACKUP_TIMESTAMP}.tar.gz \
              --exclude='laravel_project/storage/logs/*' \
              --exclude='laravel_project/storage/framework/sessions/*' \
              --exclude='laravel_project/storage/framework/cache/*' \
              laravel_project && \
            echo '‚úÖ Backup created: laravel_project_backup_${BACKUP_TIMESTAMP}.tar.gz' && \
            ls -t laravel_project_backup_*.tar.gz | tail -n +${RETENTION} | xargs -r rm && \
            echo 'üßπ Old backups cleaned, keeping ${BACKUP_RETENTION_COUNT} most recent'"

      - name: üîß Enable maintenance mode
        timeout-minutes: 1
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan down --retry=${MAINTENANCE_RETRY_SECONDS} --render='errors::503'"

      - name: üóÑÔ∏è Run database migrations
        timeout-minutes: 10
        id: migrations
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan migrate --force"

      - name: üßπ Clean public/build directory
        timeout-minutes: 1
        run: |
          ssh $SSH_TARGET "rm -rf $PUBLIC_PATH/build"

      - name: üåê Deploy public files to DEFAULT
        timeout-minutes: 5
        run: |
          rsync -avz \
            --exclude=storage \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./public/ \
            $SSH_TARGET:$PUBLIC_PATH/

      - name: üßº Optimize and verify deployment
        timeout-minutes: 5
        run: |
          ssh $SSH_TARGET "\
            cd $PROJECT_PATH && \
            php artisan config:cache && \
            php artisan route:cache && \
            php artisan view:cache && \
            php artisan event:cache && \
            chmod -R u+rwX,g+rwX,o+rX storage && \
            chmod -R u+rwX,g+rwX,o+rX bootstrap/cache && \
            php artisan --version && \
            php artisan config:show app.env | grep -q 'production' && \
            test -d vendor || (echo '‚ùå Vendor directory missing' && exit 1)"

      - name: ‚úÖ Disable maintenance mode
        timeout-minutes: 1
        if: success()
        run: |
          ssh $SSH_TARGET "cd $PROJECT_PATH && php artisan up"

      - name: üè• Health check
        timeout-minutes: 1
        if: success()
        run: |
          # Wait for application to fully initialize
          for i in {1..12}; do
            curl --fail ... && break
            sleep 5
          done
          curl --fail --silent --show-error --max-time 10 \
            https://${{ secrets.DOMAIN }}/health || {
            echo "‚ö†Ô∏è Health check failed - please verify application manually"
            echo "URL: https://${{ secrets.DOMAIN }}"
            exit 0
          }

      - name: üìä Deployment completed successfully
        if: success()
        run: |
          echo "‚úÖ Deployment completed successfully at $(date)"
          echo "üåê Application: https://${{ secrets.DOMAIN }}"

      - name: üö® Rollback deployment on failure
        if: failure() && steps.migrations.outcome == 'failure'
        timeout-minutes: 5
        run: |
          echo "‚ùå Critical failure detected - initiating rollback"
          ssh $SSH_TARGET 'bash -s' << ENDSSH
            cd /domains/${{ secrets.DOMAIN }}
            BACKUP=$(ls -t laravel_project_backup_*.tar.gz 2>/dev/null | head -1)

            if [ -n "$BACKUP" ]; then
              echo "üì¶ Restoring from backup: $BACKUP"
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              mv laravel_project "laravel_project_failed_${TIMESTAMP}"
              tar -xzf "$BACKUP"
              cd laravel_project
              php artisan up
              echo "‚úÖ Rollback completed successfully"
            else
              echo "‚ùå No backup available for rollback"
              cd laravel_project
              php artisan migrate:rollback --step=1 --force
              php artisan up
              echo "‚ö†Ô∏è Attempted migration rollback and disabled maintenance mode"
            fi
          ENDSSH
          [ $? -eq 0 ] || {
            echo "‚ùå Rollback failed - attempting emergency recovery"
            ssh $SSH_TARGET "cd $PROJECT_PATH && php artisan up" || true
          }
          echo "üíæ Server backups available at: /domains/${{ secrets.DOMAIN }}/laravel_project_backup_*.tar.gz"
          exit 1

      - name: 'üö® Emergency: Disable maintenance mode'
        if: failure() && steps.migrations.outcome != 'failure'
        timeout-minutes: 1
        run: |
          echo "‚ö†Ô∏è Non-critical failure - disabling maintenance mode"
          ssh $SSH_TARGET "cd $PROJECT_PATH && php artisan up" || {
            echo "‚ùå Failed to disable maintenance mode - manual intervention required"
            echo "Run: php artisan up'"
          }
          exit 1

      - name: üßπ Cleanup SSH agent
        if: always()
        run: ssh-add -D 2>/dev/null || true
